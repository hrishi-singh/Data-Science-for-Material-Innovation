# -*- coding: utf-8 -*-
"""Data_science_for_material_innovation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mx732Lt1zjQPkZg8qOjobb_jdfKKzFmI

Importing supporting libraries
"""

import pandas as pd
from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn import datasets
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor

"""Loading Excel Dataset at the colab platform"""

df=pd.read_excel("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Final Dataset/polymer_dataset.xlsx")

"""# Preprocessing the dataset

"""

df.head()

df=df.drop(columns=['Unnamed: 7','Unnamed: 6'])

df.head()

"""for ML model, we need only parameters amd Target values, therefore we drop material name and reference link"""

df=df.drop(columns=['Material Name','Reference link'])

df.head()

df.describe()

df.isnull()

df.isnull().values.sum()

df=df.dropna(axis=0,how='any')

df.shape

# X=df.iloc[:,1:]
# X

Y=df['Density(gm/cm3)']
Density=[]
G=[]
Yg=[]
T=[]

for i in Y:
    if(type(i)!=float):
        p=i.split('-')
        Density.append((float(p[0])+float(p[1]))/2)
    else:
        Density.append(i)

for j in df['Glass Transition Temperature(deg C)']:
    if((type(j)==str)):
        p=j.split(' - ')
        G.append((float(p[0])+float(p[1]))/2)
    else:
        G.append(j)
print(G)
len(G)

for j in df['youngs modulus(GPa)']:
    if((type(j)==str)):
        p=j.split(' - ')
        Yg.append((float(p[0])+float(p[1]))/2)
    else:
        Yg.append(j)
print(Yg)
len(Yg)

for j in df['tensile strengh at Break(MPa)']:
    if((type(j)==str)):
        p=j.split(' - ')
        T.append((float(p[0])+float(p[1]))/2)
    else:
        T.append(j)
print(T)
len(T)

# Y=pd.DataFrame(Density,columns=['Density'])
# Y

X=pd.DataFrame(G,columns=['Glass_Transition_Temp'])
X['young_mod']=pd.Series(Yg,index=X.index)
X['tensile_strengh_at_Break']=pd.Series(T,index=X.index)
X['Density']=pd.Series(Density,index=X.index)
X = X.drop(X[X.young_mod > 120].index)
# X = X.drop(X[X.Density >2.3 ].index)
# X = X.drop(X[X.Density <0.5].index)
X = X.drop(X[X.tensile_strengh_at_Break > 70].index)
X

fig, axes = plt.subplots(2, 2, figsize=(15,15), sharey=True,dpi=150)
sns.histplot(X, ax=axes[0][0], x=X['Density'], kde=True, color='y')
sns.histplot(X, ax=axes[0][1], x=X['Glass_Transition_Temp'], kde=True, color='b')
sns.histplot(X, ax=axes[1][0], x=X['young_mod'], kde=True)
sns.histplot(X, ax=axes[1][1], x=X['tensile_strengh_at_Break'], kde=True)
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Histogram/histograms_of_Properties.png",dpi=300)

sns.histplot(X,x=X['Density'],kde=True,color='y')
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Histogram/histograms_of_Density.png",dpi=300)

plt.scatter(X['Density'],X['Glass_Transition_Temp'],color='Teal')
plt.xlabel('Density(g/cc)')
plt.ylabel('Glass Transition Temperature(deg C)(âˆ˜C)')
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/Tg-Density.png",dpi=150)
# plt.scatter(Y['Density'],X['young_mod'],color='y')
# plt.xlim([0.5,2.5])
# plt.ylim([0,450]

plt.scatter(X['Density'],X['young_mod'],color='y')
plt.xlabel('Density(g/cc)')
plt.ylabel("Young's Modulus (GPa)")
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/Yng_Modulus-Density.png",dpi=150)
# plt.xlim([0.5,2.5])
# plt.ylim([0,20])

plt.scatter(X['Density'],X['tensile_strengh_at_Break'],color='Brown')
plt.xlabel('Density(g/cc)')
plt.ylabel("tensile strengh at Break(MPa)")
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/tensile strengh at Break(MPa)-Density.png",dpi=150)

Y=X['Density']

X=X.iloc[:,:-1]
X

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

print(X_train.shape)
X_train

X_test

y_test
DF_test = pd.DataFrame(y_test)
DF_test

model = XGBRegressor()
model.fit(X_train, y_train)

print(f'Score: {round(model.score(X_test, y_test)*100)} %')

y_pred=model.predict(X_test)
DF = pd.DataFrame(y_pred)
DF.to_csv("pred.csv")

sns.histplot(x=y_pred,kde=True,bins=25,color='red',legend=True).set(title='Histogram plot for Predicted and True Density using XGBoost')
sns.histplot(x=y_test,kde=True,bins=25,color='Blue',legend=True)
plt.legend(labels=["Pedicted Density","True Density"])
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/XGB_Predicted_vs_True.png",dpi=150)

from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression

forest = RandomForestRegressor()
forest.fit(X_train, y_train)

print(f'Score: {round(forest.score(X_test, y_test)*100)} %')

y_pred=forest.predict(X_test)
y_pred

DF_test['Predicted_Density'] = y_pred
DF_test.to_csv(r"/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Final Dataset/polymer_pred_using_random_forests.csv",index=False)

sns.histplot(x=y_pred,kde=True,bins=25,color='r',legend=True).set(title='Histogram plot for Predicted and True Density using Random Forest')
sns.histplot(x=y_test,kde=True,bins=25,color='Blue',legend=True)
plt.legend(labels=["Pedicted Density","Actual Density"])
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/Random_forest_Predicted_vs_True.png",dpi=150)

from sklearn.linear_model import LinearRegression
reg = LinearRegression().fit(X_train, y_train)
reg.score(X_train, y_train)

print(f'Score: {round(reg.score(X_test, y_test)*100)} %')

y_pred3=reg.predict(X_test)

DF3= pd.DataFrame(y_pred3)
# DF3.rename(columns = {0:'Density(gm/cm^3)'}, inplace = True)
DF3

DF3['true Density']= pd.DataFrame(y_test)
DF3

sns.histplot(x=DF3[0],kde=True,bins='auto',color='r',legend=True).set(title='Histogram plot for Predicted and True Density using linear Regression')
sns.histplot(x=y_test,kde=True,bins='auto',color='Blue',legend=True)
# sns.histplot(x=y_test['Density'],kde=True,bins='auto',color='Blue',legend=True)
plt.legend(labels=["Pedicted Density","Actual Density"])
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/Regressor_Predicted_vs_True.png",dpi=150)

from sklearn import svm
regr = svm.SVR()
regr.fit(X_train, y_train)
print(f'Score: {round(regr.score(X_test, y_test)*100)} %')

y_pred4=regr.predict(X_test)

sns.histplot(x=y_pred4,kde=True,bins=25,color='r',legend=True).set(title='Histogram plot for Predicted and True Density using Support Vector Machine')
# sns.histplot(x=y_test['Density'],kde=True,bins=25,color='Blue',legend=True)
sns.histplot(x=y_test,kde=True,bins='auto',color='Blue',legend=True)
plt.legend(labels=["Pedicted Density","Actual Density"])
plt.savefig("/content/drive/MyDrive/Design Credits/Hrishi(B20CH018)/Plot/SVM_Predicted_vs_True.png",dpi=150)